package cc.creativecomputing.events;

import java.awt.Component;
import java.awt.event.KeyEvent;

/**
 * An event which indicates that a keystroke occurred in a component.
 * <p>
 * This event is generated when the application is focused and a key is 
 * pressed, released, or typed. The event is passed to every <code>CCKeyListener</code>
 * object which registered to receive such events.</p>
 * <p>
 * <em>"Key typed" events</em> are higher-level and generally do not depend on 
 * the platform or keyboard layout.  They are generated when a Unicode character 
 * is entered, and are the preferred way to find out about character input.
 * In the simplest case, a key typed event is produced by a single key press 
 * (e.g., 'a').  No key typed events are generated for keys that don't generate Unicode 
 * characters (e.g., action keys, modifier keys, etc.).</p>
 * <p>
 * The getKeyChar method always returns a valid Unicode character or 
 * CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events: 
 * KEY_PRESSED and KEY_RELEASED events are not necessarily associated 
 * with character input.  Therefore, the result of the getKeyChar method 
 * is guaranteed to be meaningful only for KEY_TYPED events.   
 * <p>
 * For key pressed and key released events, the getKeyCode method returns 
 * the event's keyCode.  For key typed events, the getKeyCode method 
 * always returns VK_UNDEFINED.
 *</p>
 * <p>
 * <em>"Key pressed" and "key released" events</em> are lower-level and depend 
 * on the platform and keyboard layout. They are generated whenever a key is 
 * pressed or released, and are the only way to find out about keys that don't 
 * generate character input (e.g., action keys, modifier keys, etc.). The key 
 * being pressed or released is indicated by the getKeyCode method, which returns 
 * a virtual key code.
 *</p>
 * <p>
 * <em>Virtual key codes</em> are used to report which keyboard key has
 * been pressed, rather than a character generated by the combination
 * of one or more keystrokes (such as "A", which comes from shift and "a").  
 *</p>
 * <p>
 * For example, pressing the Shift key will cause a KEY_PRESSED event 
 * with a VK_SHIFT keyCode, while pressing the 'a' key will result in 
 * a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event 
 * will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar 
 * value of 'A' is generated.
 *</p>
 * @nosuperclasses
 */
public class CCKeyEvent extends KeyEvent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * @invisible
	 * @param theEvent
	 */
	public CCKeyEvent(final KeyEvent theEvent) {
		super(
			(Component) theEvent.getSource(), 
			theEvent.getID(), 
			theEvent.getWhen(), 
			theEvent.getModifiers(), 
			theEvent.getKeyCode(), 
			theEvent.getKeyChar(), 
			theEvent.getKeyLocation());
	}

	/**
	 * Returns the character associated with the key in this event.
	 * For example, on key typed for shift + "a" 
	 * returns the value for "A".
	 * <p>
	 * Key pressed and key released events 
	 * are not intended for reporting of character input.  Therefore, 
	 * the values returned by this method are guaranteed to be 
	 * meaningful only for key typed events.  
	 *
	 * @return the Unicode character defined for this key event.
	 *         If no valid Unicode character exists for this key event, 
	 *         <code>CHAR_UNDEFINED</code> is returned.
	 * @shortdesc Returns the character associated with the key in this event.
	 */
	public char keyChar() {
		return getKeyChar();
	}

	/**
	 * Returns the integer keyCode associated with the key in this event.
	 * 
	 * @return the integer code for an actual key on the keyboard. 
	 *         (For key typed events, the keyCode is <code>VK_UNDEFINED</code>.)
	 * @see #keyChar()
	 * @see #keyLocation()
	 */
	public int keyCode() {
		return getKeyCode();
	}

	/**
	 * Returns the location of the key that originated this key event.
	 *
	 * Some keys occur more than once on a keyboard, e.g. the left and
	 * right shift keys.  Additionally, some keys occur on the numeric
	 * keypad.  This provides a way of distinguishing such keys.
	 *
	 *@shortdesc Returns the location of the key that originated this key event.
	 * @return the location of the key that was pressed or released.
	 *         Always returns <code>KEY_LOCATION_UNKNOWN</code> for 
	 *         key typed events.
	 * @see #keyChar()
	 * @see #keyCode()
	 */
	public int keyLocation() {
		return getKeyLocation();
	}

}
